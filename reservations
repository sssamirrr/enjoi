import pandas as pd
import math
import time
import streamlit as st


# Helper Functions
def cleanup_phone_number(phone):
    """Clean up phone number format."""
    if pd.isna(phone):
        return 'No Data'
    # Remove spaces and non-numeric characters
    phone = ''.join(filter(str.isdigit, str(phone)))
    if len(phone) == 10:
        return f"+1{phone}"
    elif len(phone) == 11 and phone.startswith('1'):
        return f"+{phone}"
    return 'No Data'


def truncate_text(text, max_length=30):
    """Truncate text to a maximum length with ellipsis."""
    if isinstance(text, str) and len(text) > max_length:
        return text[:max_length] + "..."
    return text


def reset_filters(selected_resort, min_check_in, max_check_out, total_price_min, total_price_max):
    """
    Reset filter-related session state variables based on the provided resort and date range.
    """
    try:
        # Set the reset trigger to True
        st.session_state['reset_trigger'] = True

        # Store the new defaults in session state
        st.session_state[f'default_check_in_start_{selected_resort}'] = min_check_in
        st.session_state[f'default_check_in_end_{selected_resort}'] = max_check_out
        st.session_state[f'default_check_out_start_{selected_resort}'] = min_check_in
        st.session_state[f'default_check_out_end_{selected_resort}'] = max_check_out
        st.session_state[f'default_total_price_{selected_resort}'] = (float(total_price_min), float(total_price_max))
        st.session_state[f'default_rate_code_{selected_resort}'] = "All"
    except Exception as e:
        st.error(f"Error resetting filters: {e}")


# Main Marketing Tab Function
def run_marketing_tab(df, openphone_api_key, openphone_number):
    with st.container():
        st.title("ðŸ“ˆ Marketing Information by Resort")

        # Resort selection
        selected_resort = st.selectbox(
            "Select Resort",
            options=sorted(df['Market'].unique())
        )

        # Filter for selected resort
        resort_df = df[df['Market'] == selected_resort].copy()
        st.subheader(f"Guest Information for {selected_resort}")

        # Set default dates based on the selected resort
        if not resort_df.empty:
            arrival_dates = pd.to_datetime(resort_df['Arrival Date Short'], errors='coerce')
            departure_dates = pd.to_datetime(resort_df['Departure Date Short'], errors='coerce')

            arrival_dates = arrival_dates.dropna()
            departure_dates = departure_dates.dropna()

            min_check_in = arrival_dates.min().date() if not arrival_dates.empty else pd.to_datetime('today').date()
            max_check_out = departure_dates.max().date() if not departure_dates.empty else pd.to_datetime('today').date()
        else:
            today = pd.to_datetime('today').date()
            min_check_in = today
            max_check_out = today

        # Date filters
        col1, col2, col3 = st.columns([0.3, 0.3, 0.4])
        with col1:
            check_in_start = st.date_input(
                "Check In Date (Start)",
                value=min_check_in,
                key=f'check_in_start_input_{selected_resort}'
            )
            check_in_end = st.date_input(
                "Check In Date (End)",
                value=max_check_out,
                key=f'check_in_end_input_{selected_resort}'
            )

        with col2:
            check_out_start = st.date_input(
                "Check Out Date (Start)",
                value=min_check_in,
                key=f'check_out_start_input_{selected_resort}'
            )
            check_out_end = st.date_input(
                "Check Out Date (End)",
                value=max_check_out,
                key=f'check_out_end_input_{selected_resort}'
            )

        with col3:
            # Slider for Total Price
            if 'Total Price' in resort_df.columns and not resort_df['Total Price'].isnull().all():
                total_price_min = resort_df['Total Price'].min()
                total_price_max = resort_df['Total Price'].max()

                # Handle single-value range by adding a buffer
                if total_price_min == total_price_max:
                    total_price_min = total_price_min - 1  # Add a buffer of 1 unit
                    total_price_max = total_price_max + 1

                total_price_range = st.slider(
                    "Total Price Range",
                    min_value=float(total_price_min),
                    max_value=float(total_price_max),
                    value=(float(total_price_min), float(total_price_max)),
                    key=f'total_price_slider_{selected_resort}'
                )
            else:
                st.warning("No valid Total Price data available for filtering.")
                total_price_range = (0, 0)  # Default range if no valid data

            # Dropdown for Rate Code
            rate_code_options = sorted(resort_df['Rate Code Name'].dropna().unique()) if 'Rate Code Name' in resort_df.columns else []
            selected_rate_code = st.selectbox(
                "Select Rate Code",
                options=["All"] + rate_code_options,
                key=f'rate_code_filter_{selected_resort}'
            )

        # Reset Filters Button
        if st.button("Reset Filters"):
            reset_filters(selected_resort, min_check_in, max_check_out, total_price_min, total_price_max)

        # Process and display filtered data
        if not resort_df.empty:
            resort_df['Arrival Date Short'] = pd.to_datetime(resort_df['Arrival Date Short'], errors='coerce')
            resort_df['Departure Date Short'] = pd.to_datetime(resort_df['Departure Date Short'], errors='coerce')

            filtered_df = resort_df[
                (resort_df['Arrival Date Short'].dt.date >= check_in_start) &
                (resort_df['Arrival Date Short'].dt.date <= check_in_end) &
                (resort_df['Departure Date Short'].dt.date >= check_out_start) &
                (resort_df['Departure Date Short'].dt.date <= check_out_end)
            ]

            # Apply Total Price filter
            if 'Total Price' in filtered_df.columns:
                filtered_df = filtered_df[
                    (filtered_df['Total Price'] >= total_price_range[0]) &
                    (filtered_df['Total Price'] <= total_price_range[1])
                ]

            # Apply Rate Code filter
            if selected_rate_code != "All" and 'Rate Code Name' in filtered_df.columns:
                filtered_df = filtered_df[filtered_df['Rate Code Name'] == selected_rate_code]

            if not filtered_df.empty:
                st.dataframe(filtered_df)
            else:
                st.warning("No data matches the selected filters.")
        else:
            st.warning("No data available for the selected resort.")

